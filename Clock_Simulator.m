function [x,y,w] = Improved_Clock_Simulator(N,t,X_0,diff,mu)

% The function solves numerically the Weiner process (brownian motion) that
% describes a clocks deviation in time and frequency described by x,y respectively.
% w is the frequency drift - usually assumed constant.
% Noise included is white, flicker (pink) and frequency drift (brown).

% Additional drift variables for (x,y,w) are added to account of constant
% frequency offset mu(1) and linear frequency drift mu(3).

% N is the number of intervals considered and t is the time between each
% interval.
% To make this a good model, N would be large and t very small.

% The diffusion coefficients determine the dominance of each noise in the
% clock model.
% These coefficients are related to the Allan variance of a clock - see
% Diffusion_Coefficient_Estimator.m .

% Initialize the outputs.

x=zeros(1,N+1);
y=zeros(1,N+1);
w=zeros(1,N+1);

% Initial values.

x(1)=X_0(1);
y(1)=X_0(2);
w(1)=X_0(3);

% Loop through each increment of time.

for i=2:N+1

    % The noise is generated by integrating up gaussian random variables to
    % created (integrated) random walks.

    Q=[(t)*diff(1)^2+(t^3/3)*diff(2)^2+(t^5/20)*diff(3)^2 , (t^2/2)*diff(2)^2+(t^4/8)*diff(3)^2 , (t^3/6)*diff(3)^2 ;
       (t^2/2)*diff(2)^2+(t^4/8)*diff(3)^2 , (t)*diff(2)^2+(t^3/3)*diff(3)^2 , (t^2/2)*diff(3)^2 ;
       (t^3/6)*diff(3)^2 , (t^2/2)*diff(3)^2 , (t)*diff(3)^2];

    noise=mvnrnd(zeros(1,3),Q,1);

    theta=unidrnd(N,1,3);

    % Numerical integration including (integrated) random walk stochastic
    % process.

    x(i)=x(i-1)+t*(mu(1)+y(i-1))+(t^2/2)*(mu(2)+w(i-1))+(t^3/6)*mu(3)+noise(1);
    y(i)=y(i-1)+(mu(2)+w(i-1))*t+mu(3)*(t^2/2)+noise(2);
    w(i)=w(i-1)+mu(3)*t+noise(3);
end

end

