function [x,y,w] = Clock_Simulator(n,d,X_0,diffusion)

% The function solves numerically the Weiner process (brownian motion) that
% describes a clocks deviation in time and frequency described by x,y respectively.
% w is the frequency drift - usually assumed constant.
% Noise included is white, flicker (pink) and frequency drift (brown).

% n is the number of intervals considered and d is the time between each
% interval.
% To make this a good model, n would be large and d very small.

% The diffusion coefficients determine the dominance of each noise in the
% clock model.
% These coefficients are related to the Allan variance of a clock - see
% Diffusion_Coefficient_Estimator.m .

% Initialize the outputs.

x=zeros(1,n+1);
y=zeros(1,n+1);
w=zeros(1,n+1);

% Initial values.

x(1)=X_0(1);
y(1)=X_0(2);
w(1)=X_0(3);

% Loop through each increment of time.

for i=2:n+1   

    % The noise is generated by integrating up gaussian random variables to
    % created (integrated) random walks.

    noise_white=normrnd(0,diffusion(1)*sqrt(d));
    noise_flicker=normrnd(0,diffusion(2)*sqrt(d));
    noise_drift=normrnd(0,diffusion(3)*sqrt(d));

    % Numerical integration including (integrated) random walk stochastic
    % process.
    %integration

    x(i)=x(i-1)+d*y(i-1)+(d^2/2)*w(i-1)+noise_white;
    y(i)=y(i-1)+d*w(i-1)+noise_flicker;
    w(i)=w(i-1)+noise_drift;
end
end